From 48e94e61bc4ad935db6f78c2b78d5bed42058965 Mon Sep 17 00:00:00 2001
From: Masato TOYOSHIMA <phoepsilonix@phoepsilonix.love>
Date: Sat, 29 Jul 2023 15:42:22 +0900
Subject: [PATCH] pacman-download-signature.patch

Current status.
In pacman.conf, DatabaseOptional is the standard for SigLevel, and db.sig is not provided in the repository.
In pacman -Sy, the standard behaviour is that if db.sig files exist, they are also downloaded and updated. However, they are not being updated by pamac udpate, which just calls _alpm_download.
It would be better to have the same behaviour for db.sig files in pacman and pamac.
Wouldn't it be better to make it standard behaviour to download the db.sig file if the SigLevel is DatabaseRequired or DatabaseOptional?
---
 PKGBUILD                        | 13 +++++++-----
 pacman-download-signature.patch | 36 +++++++++++++++++++++++++++++++++
 2 files changed, 44 insertions(+), 5 deletions(-)
 create mode 100644 pacman-download-signature.patch

diff --git a/PKGBUILD b/PKGBUILD
index 9f6a075..527c11f 100644
--- a/PKGBUILD
+++ b/PKGBUILD
@@ -10,7 +10,7 @@
 pkgname=pacman
 pkgver=6.0.2
 _pkgver=1.9.1
-pkgrel=12
+pkgrel=13
 pkgdesc="A library-based package manager with dependency support"
 arch=('x86_64')
 url="https://www.archlinux.org/pacman/"
@@ -46,21 +46,24 @@ source=(https://sources.archlinux.org/other/pacman/$pkgname-$pkgver.tar.xz{,.sig
         pacman.conf
         makepkg.conf
         pacman-sync-first-option.patch
+        pacman-download-signature.patch
         etc-pacman.d-gnupg.mount
         pacman-init.service)
 sha256sums=('7d8e3e8c5121aec0965df71f59bedf46052c6cf14f96365c4411ec3de0a4c1a5'
             'SKIP'
             'SKIP'
-            '522b789e442b3bb3afa7ea3fa417a99554f36ec00de3986cbe92c80f09a7db99'
-            'dab7c70fb9d77d702069bb57f5a12496b463d68ae20460fb0a3ffcb4791321a9'
-            '0b56c61eac3d9425d68faa2eccbaefdc5ed422b643974ae829eaca0460043da1'
-            'acd0b149b6324dc1eca3cd2d3b30df6ef64c5653e83523d77200ec593e01d2a7'
+            '6fed94326b9ecfbb438ab17a4576b5e9d52ecc0f4574f29d46adfde3886dee03'
+            'd2bc104788290e3de829a232590b66ad745cf5b4762a01acc1191ebf70fef114'
+            'f3d4f39ef24e312f610cbb3439fb02bc6b8829e37bcf1a50ae50cd0a69bde5d0'
+            'd87d0c9957c613fda272553bee58140349d151ae399f346ddaf6d75ee5916312'
             'fd5633e107d4082d0ce96f8afe5db08819a24d5b243413ba790ecfb864e36cd4'
             '40c8c0f874a3ce1e2290be95f79b772e1e3661b7e99608e1742349eb192c0f5a'
             '8167155d3a3e15fc4a1b1e989fdb826779e7b3690a52e2ca9d307ae0b1550e1d'
+            '0aaaf3ee0e7cff48e9dd81e9a2c81c66fcb423b310ed01f6cc79b2a51b5e3816'
             'b6d14727ec465bb66d0a0358163b1bbfafcb4eaed55a0f57c30aabafae7eed68'
             '65d8bdccdcccb64ae05160b5d1e7f3e45e1887baf89dda36c1bd44c62442f91b')
 
+
 prepare() {
   cd $pkgname-$pkgver
   # we backport way too often in pacman
diff --git a/pacman-download-signature.patch b/pacman-download-signature.patch
new file mode 100644
index 0000000..ced1135
--- /dev/null
+++ b/pacman-download-signature.patch
@@ -0,0 +1,36 @@
+diff --git a/lib/libalpm/dload.c b/lib/libalpm/dload.c
+index 1bf9b4d..ea92acf 100644
+--- a/lib/libalpm/dload.c
++++ b/lib/libalpm/dload.c
+@@ -964,6 +964,16 @@ int _alpm_download(alpm_handle_t *handle,
+ 
+ 			if(payload->fileurl) {
+ 				ret = handle->fetchcb(handle->fetchcb_ctx, payload->fileurl, localpath, payload->force);
++				if(payload->download_signature) {
++					char *fileurl;
++
++					size_t len = strlen(payload->fileurl) + 4 + 2;
++					MALLOC(fileurl, len, RET_ERR(handle, ALPM_ERR_MEMORY, -1));
++					snprintf(fileurl, len, "%s.sig", payload->fileurl);
++					int ret2 = -1;
++					ret2 = handle->fetchcb(handle->fetchcb_ctx, fileurl, localpath, payload->force);
++					free(fileurl);
++				}
+ 			} else {
+ 				for(s = payload->servers; s && ret == -1; s = s->next) {
+ 					const char *server = s->data;
+@@ -975,6 +985,14 @@ int _alpm_download(alpm_handle_t *handle,
+ 
+ 					ret = handle->fetchcb(handle->fetchcb_ctx, fileurl, localpath, payload->force);
+ 					free(fileurl);
++					if(payload->download_signature) {
++						len = len + 4;
++						MALLOC(fileurl, len, RET_ERR(handle, ALPM_ERR_MEMORY, -1));
++						snprintf(fileurl, len, "%s/%s.sig", server, payload->filepath);
++						int ret2 = -1;
++						ret2 = handle->fetchcb(handle->fetchcb_ctx, fileurl, localpath, payload->force);
++						free(fileurl);
++					}
+ 				}
+ 			}
+ 
-- 
2.41.0

